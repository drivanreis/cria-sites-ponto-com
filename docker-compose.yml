# File: docker-compose.yml

services:
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: db-cria-site
      MYSQL_USER: dev-user
      MYSQL_PASSWORD: dev123
    ports:
      - "3306:3306"
    # volumes:
    #  - db_data:/var/lib/mysql # Persiste os dados do MySQL
    networks:
      - app_network # Conecta o serviço db à rede app_network
    healthcheck: # Healthcheck para o serviço de banco de dados
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Tempo para o serviço iniciar antes de começar a testar

  backend:
    build: ./backend
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000" # Mapeia a porta 8000 do contêiner para a porta 8000 na sua máquina
    environment:
       - SECRET_KEY=chave_JWT_segura_e_longa
       - ALGORITHM=HS256
       - ADMIN_ACCESS_TOKEN_EXPIRE_MINUTES=30 # Note o uso das aspas para valores com espaço ou caracteres especiais
       - USER_ACCESS_TOKEN_EXPIRE_MINUTES=180
       - DEFAULT_ADMIN_USERNAME=admin
       - DEFAULT_ADMIN_PASSWORD=P@ssword123
       - DATABASE_URL=mysql+mysqlconnector://dev-user:dev123@db:3306/db-cria-site
       - FRONTEND_NGROK_URL_FOR_CORS=${FRONTEND_NGROK_URL}
    depends_on:
      db:
        condition: service_healthy # Garante que o backend só inicie quando o DB estiver "saudável"
    networks:
      - app_network # Conecta o serviço backend à rede app_network
    healthcheck: # Healthcheck para o serviço FastAPI
      test: ["CMD", "curl", "-f", "http://localhost:8000"] # Testa se o endpoint "/" responde
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s # Importante: tempo para o serviço iniciar antes de começar a checar

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment: # Adicione esta seção para a comunicação com o backend
      # VITE_API_BASE_URL: "http://localhost:8000"
      # FRONTEND_NGROK_URL: "http://localhost:3000" # URL do frontend para comunicação
       - VITE_API_BASE_URL=${BACKEND_NGROK_URL}
       - VITE_FRONTEND_NGROK_HOST=${FRONTEND_NGROK_HOST}
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network

volumes:
  db_data: # Define um volume nomeado para persistir os dados do MySQL

networks:
  app_network:
    driver: bridge # Define uma rede bridge para comunicação entre os serviços