# File: docker-compose.yml

services:
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: db-cria-site
      MYSQL_USER: dev-user
      MYSQL_PASSWORD: dev123
    ports:
      - "3306:3306"
    # volumes:
    #  - db_data:/var/lib/mysql # Persiste os dados do MySQL
    networks:
      - app_network # Conecta o serviço db à rede app_network
    healthcheck: # Healthcheck para o serviço de banco de dados
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot123"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Tempo para o serviço iniciar antes de começar a testar

  backend:
    build: ./backend # Constrói a imagem do Dockerfile na pasta ./backend
    # Comando para iniciar a aplicação FastAPI
    # --host 0.0.0.0: Ouve em todas as interfaces de rede
    # --port 8000: Define a porta
    # --reload: Reinicia o servidor automaticamente em caso de mudanças de código (ótimo para desenvolvimento)
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      # Mapeia toda a pasta 'backend' do host para '/app' dentro do contêiner.
      # Isso inclui o código Python (src/), arquivos .env, Alembic, etc.
      # Qualquer alteração nos arquivos locais será refletida instantaneamente no contêiner.
      - ./backend:/app
    ports:
      - "8000:8000" # Mapeia a porta 8000 do contêiner para a porta 8000 na sua máquina
    environment:
      SECRET_KEY: chave_JWT_segura_e_longa
      ALGORITHM: HS256
      # >>> NOVAS VARIÁVEIS DE AMBIENTE <<<
      ADMIN_ACCESS_TOKEN_EXPIRE_MINUTES: "30" # Note que são strings
      USER_ACCESS_TOKEN_EXPIRE_MINUTES: "180"
      # ... o resto das variáveis
      DEFAULT_ADMIN_USERNAME: "admin"
      DEFAULT_ADMIN_PASSWORD: "P@ssword123"
      DATABASE_URL: mysql+mysqlconnector://dev-user:dev123@db:3306/db-cria-site
    depends_on:
      db:
        condition: service_healthy # Garante que o backend só inicie quando o DB estiver "saudável"
    networks:
      - app_network # Conecta o serviço backend à rede app_network
    healthcheck: # Healthcheck para o serviço FastAPI
      test: ["CMD", "curl", "-f", "http://localhost:8000"] # Testa se o endpoint "/" responde
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  db_data: # Define um volume nomeado para persistir os dados do MySQL

networks:
  app_network:
    driver: bridge # Define uma rede bridge para comunicação entre os serviços